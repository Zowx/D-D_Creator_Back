generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt     @id @default(autoincrement())
  username   String     
  password   String
  characters Character[]
}

model Character {
  id            BigInt              @id @default(autoincrement())
  race          Race                @relation(fields: [raceId], references: [id])
  raceId        BigInt
  class         Class               @relation(fields: [classId], references: [id])
  classId       BigInt
  background    Background          @relation(fields: [backgroundId], references: [id])
  backgroundId  BigInt  
  alignment     Alignment           @relation(fields: [alignmentId], references: [id])
  alignmentId   BigInt
  xp            Int
  level         Int
  name          String
  player        String
  AC            Int
  speed         Int
  hp            Int
  max_hp        Int
  temp_hp       Int
  personality   String
  ideals        String
  bonds         String
  flaws         String
  age           Int
  height        String
  weight        String
  eyes          String
  skin          String
  hair          String
  appearance    String
  allies        String
  backstory     String
  treasure      String
  traits        String
  skills        CharacterSkill[]
  abilities     CharacterAbility[]
  languages     CharacterLanguage[]

  User         User?       @relation(fields: [Userid], references: [id])
  Userid       BigInt?
}

model Race {
  id           BigInt        @id @default(autoincrement())
  name         String
  description  String

  Race         Race[]        @relation("Subrace")
  subrace_of   Race?         @relation("Subrace", fields: [subraceOfId], references: [id])
  subraceOfId  BigInt?

  Trait        Trait[]       @relation("RaceTraits")

  Character    Character[]
}

model Trait {
  id          BigInt     @id @default(autoincrement())
  name        String
  description String

  Race        Race     @relation("RaceTraits", fields: [raceId], references: [id])
  raceId      BigInt
}

model Class {
  id            BigInt     @id @default(autoincrement())
  name          String
  hitDice       String?

  // Auto-référence : une classe peut avoir une sous-classe
  subclassId    BigInt?           // nullable = pas toujours une sous-classe
  subclass      Class?            @relation("SubclassRelation", fields: [subclassId], references: [id])
  subclasses    Class[]           @relation("SubclassRelation") // les classes dont celle-ci est la sous-classe

  // Many-to-Many avec Ability
  savingThrows  Ability[]         @relation("SavingThrows")

  // One-to-Many avec Character
  Character     Character[]
}

model Ability {
  id                BigInt               @id @default(autoincrement())
  name              String
  description       String
  shortDescription  String

  skill             Skill[]
  class             Class[]              @relation("SavingThrows")
  CharacterAbility  CharacterAbility[]
  BackgroundAbility BackgroundAbility[]
}

model Skill {
  id             BigInt            @id @default(autoincrement()) 
  name           String
  description    String
  abilityId      BigInt
  ability        Ability           @relation(fields: [abilityId], references: [id])

  CharacterSkill    CharacterSkill[]
  backgrounds    BackgroundSkillSkill[]
}

model Background {
  id                       BigInt                @id @default(autoincrement())
  name                     String  
  description              String
  abilityChoice            Int
  skillChoice              Int
  languagesChoice          Int
  connectionAndMemento     String?
  adventuresAndAdvancement String?
  featureName              String?
  featureDescription       String?

  abilities   BackgroundAbility[]
  skills    BackgroundSkill[]
  languages BackgroundLanguage[]
  Character Character[]
}

model BackgroundSkill {
  id           BigInt     @id @default(autoincrement())

  Background   Background @relation(fields: [BackgroundId], references: [id])
  BackgroundId BigInt

  BackgroundSkillSkill    BackgroundSkillSkill[]
}

model BackgroundSkillSkill {
  id           BigInt     @id @default(autoincrement())

  BackgroundSkill   BackgroundSkill @relation(fields: [BackgroundSkillId], references: [id])
  BackgroundSkillId BigInt

  Skill        Skill      @relation(fields: [SkillId], references: [id])
  SkillId      BigInt
}

model BackgroundAbility {
  id           BigInt     @id @default(autoincrement())
  value        Int

  Background   Background @relation(fields: [BackgroundId], references: [id])
  BackgroundId BigInt

  Ability      Ability    @relation(fields: [AbilityId], references: [id])
  AbilityId    BigInt
}

model BackgroundLanguage {
  id           BigInt     @id @default(autoincrement())

  Language     Language   @relation(fields: [LanguageId], references: [id])
  LanguageId   BigInt

  Background   Background @relation(fields: [BackgroundId], references: [id])
  BackgroundId BigInt
}

model Alignment {
  id          BigInt      @id @default(autoincrement())
  name        String
  description String

  Character   Character[]
}

model CharacterSkill {
  id          BigInt     @id @default(autoincrement()) 
  value       String

  character   Character  @relation(fields: [characterId], references: [id])
  characterId BigInt

  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     BigInt
}

model CharacterAbility {
  id          BigInt     @id @default(autoincrement()) 

  character   Character  @relation(fields: [characterId], references: [id])
  characterId BigInt

  ability     Ability    @relation(fields: [abilityId], references: [id])
  abilityId   BigInt
}

model Language {
  id          BigInt     @id @default(autoincrement())
  name        String
  description String
  exotic      Boolean
  secret      Boolean

  characters  CharacterLanguage[]
  backgrounds BackgroundLanguage[]
}

model CharacterLanguage {
  id          BigInt     @id @default(autoincrement())

  character   Character  @relation(fields: [characterId], references: [id])
  characterId BigInt

  language    Language   @relation(fields: [languageId], references: [id])
  languageId  BigInt
}
